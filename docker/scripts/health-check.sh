#!/bin/bash
# ========================================
# FLB Solutions - Health Check Script
# Validation robuste de l'√©tat du container
# ========================================

set -euo pipefail

# Configuration
HEALTH_PORT=${HEALTH_PORT:-3000}
TIMEOUT=${HEALTH_TIMEOUT:-5}
MAX_RETRIES=${HEALTH_RETRIES:-3}

# Fonction de logging
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] HEALTH: $1" >&2
}

# V√©rifications syst√®me
check_system() {
    # V√©rification m√©moire disponible
    local mem_available=$(awk '/MemAvailable/ {print $2}' /proc/meminfo)
    local mem_threshold=500000  # 500MB en KB
    
    if [[ $mem_available -lt $mem_threshold ]]; then
        log "‚ùå M√©moire insuffisante: ${mem_available}KB disponible"
        return 1
    fi
    
    # V√©rification espace disque
    local disk_usage=$(df /app | awk 'NR==2 {print $5}' | sed 's/%//')
    if [[ $disk_usage -gt 90 ]]; then
        log "‚ùå Espace disque critique: ${disk_usage}% utilis√©"
        return 1
    fi
    
    return 0
}

# V√©rification des processus critiques
check_processes() {
    # V√©rifier si Node.js fonctionne
    if ! pgrep -f "node" > /dev/null; then
        log "‚ùå Processus Node.js non d√©tect√©"
        return 1
    fi
    
    # V√©rifier les navigateurs si tests en cours
    if [[ -f "/tmp/tests-running" ]]; then
        if ! pgrep -f "chromium\|firefox\|webkit" > /dev/null; then
            log "‚ö†Ô∏è  Tests en cours mais navigateurs non d√©tect√©s"
            # Non critique - tests peuvent √™tre en phase d'initialisation
        fi
    fi
    
    return 0
}

# V√©rification HTTP endpoint
check_http() {
    local url="http://localhost:${HEALTH_PORT}/health"
    local response_code
    
    response_code=$(curl -s -o /dev/null -w "%{http_code}" \
        --connect-timeout "$TIMEOUT" \
        --max-time "$TIMEOUT" \
        "$url" 2>/dev/null || echo "000")
    
    if [[ "$response_code" != "200" ]]; then
        log "‚ùå Health endpoint inaccessible (HTTP: $response_code)"
        return 1
    fi
    
    return 0
}

# V√©rification des fichiers critiques
check_files() {
    local critical_files=(
        "/app/package.json"
        "/app/playwright.config.js"
        "/app/node_modules/@playwright/test"
    )
    
    for file in "${critical_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            log "‚ùå Fichier critique manquant: $file"
            return 1
        fi
    done
    
    # V√©rifier les navigateurs
    if [[ ! -d "/home/flbtest/.cache/ms-playwright" ]]; then
        log "‚ùå Navigateurs Playwright non install√©s"
        return 1
    fi
    
    return 0
}

# V√©rification Playwright
check_playwright() {
    # Test rapide de Playwright
    local playwright_test
    playwright_test=$(timeout 10s npx playwright --version 2>/dev/null || echo "failed")
    
    if [[ "$playwright_test" == "failed" ]]; then
        log "‚ùå Playwright non fonctionnel"
        return 1
    fi
    
    return 0
}

# Health check principal avec retry
main() {
    local attempt=1
    
    while [[ $attempt -le $MAX_RETRIES ]]; do
        log "üîç Health check (tentative $attempt/$MAX_RETRIES)..."
        
        # Ex√©cution des v√©rifications
        if check_system && \
           check_files && \
           check_processes && \
           check_playwright; then
            
            # Si pas de serveur HTTP, juste valider les composants
            if ! check_http 2>/dev/null; then
                log "‚ÑπÔ∏è  Serveur HTTP non disponible - mode standalone"
            fi
            
            log "‚úÖ Container en bonne sant√©"
            exit 0
        fi
        
        if [[ $attempt -lt $MAX_RETRIES ]]; then
            log "‚è≥ √âchec tentative $attempt - retry dans 2s..."
            sleep 2
        fi
        
        ((attempt++))
    done
    
    log "‚ùå Health check √©chou√© apr√®s $MAX_RETRIES tentatives"
    exit 1
}

# Ex√©cution
main "$@"