#!/bin/bash

# Script de lancement des tests FLB Solutions
# G√®re l'environnement virtuel et les d√©pendances automatiquement

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NODE_ENV_DIR="$SCRIPT_DIR/node_env"
NODE_VERSION="18"

print_status "üß™ FLB Solutions - Tests de R√©gression"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# V√©rifier si Node.js est install√©
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©. Veuillez l'installer d'abord."
    echo "Commande sugg√©r√©e: curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && sudo apt-get install -y nodejs"
    exit 1
fi

# Cr√©er/activer l'environnement virtuel Node.js
if [ ! -d "$NODE_ENV_DIR" ]; then
    print_status "üì¶ Cr√©ation de l'environnement virtuel Node.js..."
    mkdir -p "$NODE_ENV_DIR"
    
    # Cr√©er un package.json local pour l'environnement
    cd "$NODE_ENV_DIR"
    npm init -y > /dev/null 2>&1
    cd "$SCRIPT_DIR"
    
    print_success "Environnement virtuel cr√©√©"
fi

# Fonction pour installer les d√©pendances
install_dependencies() {
    print_status "üì• Installation des d√©pendances..."
    
    # Installer les d√©pendances dans le r√©pertoire principal
    cd "$SCRIPT_DIR"
    npm install
    
    # Installer les navigateurs Playwright
    print_status "üåê Installation des navigateurs Playwright..."
    npx playwright install
    
    print_success "D√©pendances install√©es"
}

# V√©rifier si les d√©pendances sont install√©es
if [ ! -d "$SCRIPT_DIR/node_modules" ] || [ ! -f "$SCRIPT_DIR/node_modules/.bin/playwright" ]; then
    install_dependencies
else
    print_status "‚úÖ D√©pendances d√©j√† install√©es"
fi

# V√©rifier si le fichier .env existe
if [ ! -f "$SCRIPT_DIR/.env" ]; then
    print_warning "Fichier .env non trouv√©. Configuration des credentials..."
    node "$SCRIPT_DIR/setup-credentials.js"
fi

# Charger les variables d'environnement
if [ -f "$SCRIPT_DIR/.env" ]; then
    export $(grep -v '^#' "$SCRIPT_DIR/.env" | xargs)
    print_status "üîê Variables d'environnement charg√©es"
fi

# D√©terminer le type de test √† ex√©cuter
TEST_TYPE="${1:-smoke}"
TEST_OPTIONS="${2:-}"

case $TEST_TYPE in
    "setup")
        print_status "üîß Configuration des credentials..."
        node "$SCRIPT_DIR/setup-credentials.js"
        ;;
    "smoke")
        print_status "üö® Lancement des tests smoke (2-3 min)..."
        cd "$SCRIPT_DIR"
        npx playwright test tests/smoke/ $TEST_OPTIONS
        ;;
    "auth")
        print_status "üîê Lancement des tests authentifi√©s..."
        cd "$SCRIPT_DIR"
        npx playwright test tests/smoke/flb-authenticated.spec.js $TEST_OPTIONS
        ;;
    "all")
        print_status "üéØ Lancement de tous les tests (5-10 min)..."
        cd "$SCRIPT_DIR"
        npx playwright test tests/ $TEST_OPTIONS
        ;;
    "multi")
        print_status "üåê Lancement multi-navigateurs (10-15 min)..."
        cd "$SCRIPT_DIR"
        npx playwright test tests/ --project=chromium --project=firefox --project=webkit $TEST_OPTIONS
        ;;
    "parallel")
        print_status "‚ö° Lancement tests parall√®les..."
        cd "$SCRIPT_DIR"
        npx playwright test tests/ --workers=4 $TEST_OPTIONS
        ;;
    "debug")
        print_status "üêõ Lancement en mode debug..."
        cd "$SCRIPT_DIR"
        npx playwright test tests/ --headed --debug $TEST_OPTIONS
        ;;
    "report")
        print_status "üìä Ouverture du rapport..."
        cd "$SCRIPT_DIR"
        npx playwright show-report
        ;;
    "clean")
        print_status "üßπ Nettoyage de l'environnement..."
        rm -rf "$NODE_ENV_DIR"
        rm -f "$SCRIPT_DIR/.env"
        print_success "Environnement nettoy√©"
        ;;
    "help"|"-h"|"--help")
        echo ""
        echo "Usage: $0 [COMMAND] [OPTIONS]"
        echo ""
        echo "COMMANDS:"
        echo "  setup     Configuration des credentials"
        echo "  smoke     Tests smoke (d√©faut, 2-3 min)"
        echo "  auth      Tests authentifi√©s"
        echo "  all       Tous les tests (5-10 min)"
        echo "  multi     Multi-navigateurs (10-15 min)"
        echo "  parallel  Tests en parall√®le"
        echo "  debug     Mode debug avec interface"
        echo "  report    Ouvrir le rapport HTML"
        echo "  clean     Nettoyer l'environnement"
        echo "  help      Afficher cette aide"
        echo ""
        echo "OPTIONS Playwright:"
        echo "  --headed          Avec interface graphique"
        echo "  --debug          Mode pas-√†-pas"
        echo "  --project=NAME   Navigateur sp√©cifique"
        echo "  --workers=N      Nombre de workers parall√®les"
        echo ""
        echo "Exemples:"
        echo "  $0                    # Tests smoke"
        echo "  $0 auth --headed      # Tests auth avec interface"
        echo "  $0 multi              # Multi-navigateurs"
        echo "  $0 debug              # Mode debug"
        echo ""
        ;;
    *)
        print_error "Commande inconnue: $TEST_TYPE"
        echo "Utilisez '$0 help' pour voir les options disponibles"
        exit 1
        ;;
esac

# Afficher le rapport si les tests ont √©t√© ex√©cut√©s
if [[ "$TEST_TYPE" =~ ^(smoke|auth|all|multi|parallel)$ ]] && [ $? -eq 0 ]; then
    echo ""
    print_success "Tests termin√©s !"
    echo "üìä Pour voir le rapport d√©taill√©: $0 report"
fi